server.port=9002
spring.application.name=USER-SERVICE
spring.data.mongodb.uri=mongodb://localhost:27017/zuul



eureka.client.register-with-eureka=true
eureka.client.fetch-registry=true
eureka.client.service-url.defaultZone=http://localhost:8761/eureka/
eureka.instance.hostname=localhost


security.oauth2.client.client-id=patel
security.oauth2.client.client-secret=patel
security.oauth2.resource.jwt.key-uri=http://localhost:8080/oauth/token_key




#--------------To get proper status of the service-------------------------------#
management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=always
#To see CircuitBeeaker status in actuator/health
management.health.circuitbreakers.enabled: true

#-------------Resilience4j Configuration-----------------------------------#
#@CircuitBreaker(name = "userService", fallbackMethod = "fallBackForRetrieveDepartment")
#resilience4j.circuitbreaker.instances + {circuitBreakerName} + 
resilience4j.circuitbreaker.instances.userService.registerHealthIndicator=true 

#CircuitBreaker waits for 5s after that if any call comes. it goes to halfOpenState
resilience4j.circuitbreaker.instances.userService.waitDurationInOpenState: 10s
# 3 call will be tried then state change will take place either close or open
resilience4j.circuitbreaker.instances.userService.ringBufferSizeInHalfOpenState: 3

#the failure rate threshold above which the CircuitBreaker opens and starts short-circuiting call ---- its 50% not 50 calls
resilience4j.circuitbreaker.instances.userService.failureRateThreshold: 50
#Out of 5 calls if 50% {failureRateThreshold} fails CircuitBreaker opens and starts short-circuiting calls
#Success - 0
#Failure - 1
resilience4j.circuitbreaker.instances.userService.ringBufferSizeInClosedState: 5


#resilience4j.circuitbreaker.instances.userService.recordExceptions[0]:org.springframework.web.client.HttpServerErrorException
#resilience4j.circuitbreaker.instances.userService.recordExceptions[1]:java.io.IOException
#resilience4j.circuitbreaker.instances.userService.recordExceptions[2]:java.util.concurrent.TimeoutException
#resilience4j.circuitbreaker.instances.userService.recordExceptions[3]:org.springframework.web.client.ResourceAccessException
#resilience4j.circuitbreaker.instances.userService.ignoreExceptions[0]:com.gl.orderManagementApp.service.MyException


#-------------------------Rate Limiter------------------------#
#resilience4j.ratelimiter.instances.{circuitBreaker name}





#  Service is will accept only 50 calls in 500ns . more then 50 i.e 100 100-50 = 50 other call has to wait. If within 5 second remaining 50 calls don't
#get executed timeout exception will be called.
#
# 500 ns ------ 50 calls
# 500ns -------100 calls - 50 calls = 50 calls has to wait for 5s (After 5 second it will throw timeout exception)
#
#
#The number of permission available during one limit refresh period
resilience4j.ratelimiter.instances.userService.limitForPeriod=10

#The period of a limit refresh. After each period the rate limiter sets its 
#permissions count back to the limitForPeriod value 
resilience4j.ratelimiter.instances.userService.limitRefreshPeriod=100000

#The default wait time a thread waits for a permission - 5s
#If ser1 calling ser2 it will wait for 500ms to get the response.
resilience4j.ratelimiter.instances.userService.timeoutDuration=100ms


