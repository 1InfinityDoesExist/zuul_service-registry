server.port=9001
spring.application.name=department-service
spring.data.mongodb.uri=mongodb://localhost:27017/zuul
spring.main.allow-bean-definition-overriding=true


eureka.client.register-with-eureka=true
eureka.client.fetch-registry=true
eureka.client.service-url.defaultZone=http://localhost:8761/eureka/
eureka.instance.hostname=localhost


security.oauth2.client.client-id=patel
security.oauth2.client.client-secret=patel
security.oauth2.resource.jwt.key-uri=http://localhost:8080/oauth/token_key
logging.level.org.springframework.security=DEBUG
logging.level.org.springframework.security.web.FilterChainProxy=DEBUG


#--------------To get proper status of the service-------------------------------#
management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=always
#To see CircuitBeaker status in actuator/health
management.health.circuitbreakers.enabled: true

#-------------------------Rate Limiter------------------------#
#resilience4j.ratelimiter.instances.{circuitBreaker name}

#  Service is will accept only 50 calls in 500ns . more then 50 i.e 100 100-50 = 50 other call has to wait. If within 5 second remaining 50 calls don't
#get executed timeout exception will be called.
#
# 500 ns ------ 50 calls
# 500ns -------100 calls - 50 calls = 50 calls has to wait for 5s (After 5 second it will throw timeout exception)
#
#
# It Can't be 0
#The number of calls that are permitted during a period
resilience4j.ratelimiter.instances.deptService.limitForPeriod=10

#The period of a limit refresh. After each period the rate limiter sets its 
#permissions count back to the limitForPeriod value  : ns
#How often the RateLimiter refreshes the permissions is specified by limitRefreshPeriod
resilience4j.ratelimiter.instances.deptService.limitRefreshPeriod=500s

#The default wait time a thread waits for a permission - 5s
#If ser1 calling ser2 it will wait for 100ns to get the response.
#How long a thread can wait to acquire permission is specified by timeoutDuration.If no permission is available at the end of the wait time,
# the RateLimiter throws a RequestNotPermitted runtime exception.
resilience4j.ratelimiter.instances.deptService.timeoutDuration=0s



#---------------------------------------_Retry--------------------------------------#

#The maximum number of retry attempts
resilience4j.retry.instances.retryDeptService.maxRetryAttempts=100

#A fixed wait durations between retry attempts [ms] MillionSeconds
resilience4j.retry.instances.retryDeptService.waitDuration=1000






